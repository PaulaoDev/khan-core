{
    "name": "Symfony\\Component\\HttpFoundation\\Session\\Storage\\NativeSessionStorage",
    "line": 24,
    "short_desc": "This provides a base class for session attribute storage.",
    "long_desc": "",
    "hint": null,
    "tags": {
        "author": [
            [
                "Drak",
                "<drak@zikula.org>"
            ]
        ]
    },
    "namespace": "Symfony\\Component\\HttpFoundation\\Session\\Storage",
    "file": "\/home\/cabox\/workspace\/core\/src\/Khan\/Component\/HttpFoundation\/Session\/Storage\/NativeSessionStorage.php",
    "relative_file": null,
    "hash": "6d9b801c29fabbdd1f4ce5034277da79336da398",
    "parent": null,
    "modifiers": 0,
    "is_trait": false,
    "is_interface": false,
    "aliases": {
        "SessionBagInterface": "Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface",
        "StrictSessionHandler": "Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\StrictSessionHandler",
        "AbstractProxy": "Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\AbstractProxy",
        "SessionHandlerProxy": "Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\SessionHandlerProxy"
    },
    "errors": [],
    "interfaces": {
        "Symfony\\Component\\HttpFoundation\\Session\\Storage\\SessionStorageInterface": "Symfony\\Component\\HttpFoundation\\Session\\Storage\\SessionStorageInterface"
    },
    "traits": [],
    "properties": {
        "bags": {
            "name": "bags",
            "line": 29,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "\\Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface",
                    true
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": {
                "nodeType": "Expr_Array",
                "items": [],
                "attributes": {
                    "startLine": 29,
                    "endLine": 29,
                    "kind": 1
                }
            },
            "errors": []
        },
        "started": {
            "name": "started",
            "line": 34,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": {
                "nodeType": "Expr_ConstFetch",
                "name": {
                    "nodeType": "Name",
                    "parts": [
                        "false"
                    ],
                    "attributes": {
                        "startLine": 34,
                        "endLine": 34,
                        "namespacedName": {
                            "nodeType": "Name_FullyQualified",
                            "parts": [
                                "Symfony",
                                "Component",
                                "HttpFoundation",
                                "Session",
                                "Storage",
                                "false"
                            ],
                            "attributes": {
                                "startLine": 34,
                                "endLine": 34
                            }
                        }
                    }
                },
                "attributes": {
                    "startLine": 34,
                    "endLine": 34
                }
            },
            "errors": []
        },
        "closed": {
            "name": "closed",
            "line": 39,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": {
                "nodeType": "Expr_ConstFetch",
                "name": {
                    "nodeType": "Name",
                    "parts": [
                        "false"
                    ],
                    "attributes": {
                        "startLine": 39,
                        "endLine": 39,
                        "namespacedName": {
                            "nodeType": "Name_FullyQualified",
                            "parts": [
                                "Symfony",
                                "Component",
                                "HttpFoundation",
                                "Session",
                                "Storage",
                                "false"
                            ],
                            "attributes": {
                                "startLine": 39,
                                "endLine": 39
                            }
                        }
                    }
                },
                "attributes": {
                    "startLine": 39,
                    "endLine": 39
                }
            },
            "errors": []
        },
        "saveHandler": {
            "name": "saveHandler",
            "line": 44,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\AbstractProxy",
                    false
                ],
                [
                    "\\SessionHandlerInterface",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": null,
            "errors": []
        },
        "metadataBag": {
            "name": "metadataBag",
            "line": 49,
            "short_desc": "",
            "long_desc": "",
            "hint": [
                [
                    "\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 2,
            "default": null,
            "errors": []
        }
    },
    "methods": {
        "__construct": {
            "name": "__construct",
            "line": 97,
            "short_desc": "Depending on how you want the storage driver to behave you probably\nwant to override this constructor entirely.",
            "long_desc": "List of options for $options array with their defaults.",
            "hint": null,
            "hint_desc": null,
            "tags": {
                "see": [
                    [
                        "http:\/\/php.net\/session.configuration",
                        "for",
                        "options\nbut",
                        "we",
                        "omit",
                        "'session.'",
                        "from",
                        "the",
                        "beginning",
                        "of",
                        "the",
                        "keys",
                        "for",
                        "convenience.\n\n(\"auto_start\",",
                        "is",
                        "not",
                        "supported",
                        "as",
                        "it",
                        "tells",
                        "PHP",
                        "to",
                        "start",
                        "a",
                        "session",
                        "before\nPHP",
                        "starts",
                        "to",
                        "execute",
                        "user-land",
                        "code.",
                        "Setting",
                        "during",
                        "runtime",
                        "has",
                        "no",
                        "effect).\n\ncache_limiter,",
                        "\"\"",
                        "(use",
                        "\"0\"",
                        "to",
                        "prevent",
                        "headers",
                        "from",
                        "being",
                        "sent",
                        "entirely).\ncache_expire,",
                        "\"0\"\ncookie_domain,",
                        "\"\"\ncookie_httponly,",
                        "\"\"\ncookie_lifetime,",
                        "\"0\"\ncookie_path,",
                        "\"\/\"\ncookie_secure,",
                        "\"\"\ngc_divisor,",
                        "\"100\"\ngc_maxlifetime,",
                        "\"1440\"\ngc_probability,",
                        "\"1\"\nlazy_write,",
                        "\"1\"\nname,",
                        "\"PHPSESSID\"\nreferer_check,",
                        "\"\"\nserialize_handler,",
                        "\"php\"\nuse_strict_mode,",
                        "\"0\"\nuse_cookies,",
                        "\"1\"\nuse_only_cookies,",
                        "\"1\"\nuse_trans_sid,",
                        "\"0\"\nupload_progress.enabled,",
                        "\"1\"\nupload_progress.cleanup,",
                        "\"1\"\nupload_progress.prefix,",
                        "\"upload_progress_\"\nupload_progress.name,",
                        "\"PHP_SESSION_UPLOAD_PROGRESS\"\nupload_progress.freq,",
                        "\"1%\"\nupload_progress.min-freq,",
                        "\"1\"\nurl_rewriter.tags,",
                        "\"a=href,area=href,frame=src,form=,fieldset=\"\nsid_length,",
                        "\"32\"\nsid_bits_per_character,",
                        "\"5\"\ntrans_sid_hosts,",
                        "$_SERVER['HTTP_HOST']\ntrans_sid_tags,",
                        "\"a=href,area=href,frame=src,form=\""
                    ]
                ]
            },
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "options": {
                    "name": "options",
                    "line": 97,
                    "short_desc": "Session configuration options",
                    "long_desc": null,
                    "hint": [
                        [
                            "array",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "array",
                    "default": "array()",
                    "variadic": false,
                    "is_by_ref": false
                },
                "handler": {
                    "name": "handler",
                    "line": 97,
                    "short_desc": "",
                    "long_desc": null,
                    "hint": [
                        [
                            "\\SessionHandlerInterface",
                            false
                        ],
                        [
                            "null",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": "null",
                    "variadic": false,
                    "is_by_ref": false
                },
                "metaBag": {
                    "name": "metaBag",
                    "line": 97,
                    "short_desc": "MetadataBag",
                    "long_desc": null,
                    "hint": [
                        [
                            "\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": {
                        "nodeType": "Name_FullyQualified",
                        "parts": [
                            "Symfony",
                            "Component",
                            "HttpFoundation",
                            "Session",
                            "Storage",
                            "MetadataBag"
                        ],
                        "attributes": {
                            "startLine": 97,
                            "endLine": 97
                        }
                    },
                    "default": "null",
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "getSaveHandler": {
            "name": "getSaveHandler",
            "line": 119,
            "short_desc": "Gets the save handler instance.",
            "long_desc": "",
            "hint": [
                [
                    "\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\Proxy\\AbstractProxy",
                    false
                ],
                [
                    "\\SessionHandlerInterface",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "start": {
            "name": "start",
            "line": 127,
            "short_desc": "Starts the session.",
            "long_desc": "",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "True if started",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [
                [
                    "\\RuntimeException",
                    "if something goes wrong starting the session"
                ]
            ],
            "errors": [],
            "parameters": []
        },
        "getId": {
            "name": "getId",
            "line": 154,
            "short_desc": "Returns the session ID.",
            "long_desc": "",
            "hint": [
                [
                    "string",
                    false
                ]
            ],
            "hint_desc": "The session ID or empty",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "setId": {
            "name": "setId",
            "line": 162,
            "short_desc": "Sets the session ID.",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "id": {
                    "name": "id",
                    "line": 162,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "getName": {
            "name": "getName",
            "line": 170,
            "short_desc": "Returns the session name.",
            "long_desc": "",
            "hint": [
                [
                    "mixed",
                    false
                ]
            ],
            "hint_desc": "The session name",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "setName": {
            "name": "setName",
            "line": 178,
            "short_desc": "Sets the session name.",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "name": {
                    "name": "name",
                    "line": 178,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "regenerate": {
            "name": "regenerate",
            "line": 186,
            "short_desc": "Regenerates id that represents this storage.",
            "long_desc": "This method must invoke session_regenerate_id($destroy) unless\nthis interface is used for a storage object designed for unit\nor functional testing where a real PHP session would interfere\nwith testing.\n\nNote regenerate+destroy should not clear the session data in memory\nonly delete the session data from persistent storage.\n\nCare: When regenerating the session ID no locking is involved in PHP's\nsession design. See https:\/\/bugs.php.net\/bug.php?id=61470 for a discussion.\nSo you must make sure the regenerated session is saved BEFORE sending the\nheaders with the new ID. Symfony's HttpKernel offers a listener for this.\nSee Symfony\\Component\\HttpKernel\\EventListener\\SaveSessionListener.\nOtherwise session data could get lost again for concurrent requests with the\nnew ID. One result could be that you get logged out after just logging in.",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "True if session regenerated, false if error",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [
                [
                    "\\RuntimeException",
                    "If an error occurs while regenerating this storage"
                ]
            ],
            "errors": [],
            "parameters": {
                "destroy": {
                    "name": "destroy",
                    "line": 186,
                    "short_desc": "Destroy session when regenerating?",
                    "long_desc": null,
                    "hint": [
                        [
                            "bool",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": "false",
                    "variadic": false,
                    "is_by_ref": false
                },
                "lifetime": {
                    "name": "lifetime",
                    "line": 186,
                    "short_desc": "Sets the cookie lifetime for the session cookie. A null value\n                      will leave the system settings unchanged, 0 sets the cookie\n                      to expire with browser session. Time is in seconds, and is\n                      not a Unix timestamp.",
                    "long_desc": null,
                    "hint": [
                        [
                            "int",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": "null",
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "save": {
            "name": "save",
            "line": 217,
            "short_desc": "Force the session to be saved and closed.",
            "long_desc": "This method must invoke session_write_close() unless this interface is\nused for a storage object design for unit or functional testing where\na real PHP session would interfere with testing, in which case\nit should actually persist the session data if required.",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [
                [
                    "\\RuntimeException",
                    "if the session is saved without being started, or if the session\n                          is already closed"
                ]
            ],
            "errors": [],
            "parameters": []
        },
        "clear": {
            "name": "clear",
            "line": 261,
            "short_desc": "Clear all session data in memory.",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "registerBag": {
            "name": "registerBag",
            "line": 278,
            "short_desc": "Registers a SessionBagInterface for use.",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "bag": {
                    "name": "bag",
                    "line": 278,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "\\Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": {
                        "nodeType": "Name_FullyQualified",
                        "parts": [
                            "Symfony",
                            "Component",
                            "HttpFoundation",
                            "Session",
                            "SessionBagInterface"
                        ],
                        "attributes": {
                            "startLine": 278,
                            "endLine": 278
                        }
                    },
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "getBag": {
            "name": "getBag",
            "line": 290,
            "short_desc": "Gets a SessionBagInterface by name.",
            "long_desc": "",
            "hint": [
                [
                    "\\Symfony\\Component\\HttpFoundation\\Session\\SessionBagInterface",
                    false
                ]
            ],
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [
                [
                    "\\InvalidArgumentException",
                    "If the bag does not exist"
                ]
            ],
            "errors": [],
            "parameters": {
                "name": {
                    "name": "name",
                    "line": 290,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "string",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "setMetadataBag": {
            "name": "setMetadataBag",
            "line": 305,
            "short_desc": "",
            "long_desc": "",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "metaBag": {
                    "name": "metaBag",
                    "line": 305,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": {
                        "nodeType": "Name_FullyQualified",
                        "parts": [
                            "Symfony",
                            "Component",
                            "HttpFoundation",
                            "Session",
                            "Storage",
                            "MetadataBag"
                        ],
                        "attributes": {
                            "startLine": 305,
                            "endLine": 305
                        }
                    },
                    "default": "null",
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "getMetadataBag": {
            "name": "getMetadataBag",
            "line": 319,
            "short_desc": "Gets the MetadataBag.",
            "long_desc": "",
            "hint": [
                [
                    "\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\MetadataBag",
                    false
                ]
            ],
            "hint_desc": "",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "isStarted": {
            "name": "isStarted",
            "line": 327,
            "short_desc": "Checks if the session is started.",
            "long_desc": "",
            "hint": [
                [
                    "bool",
                    false
                ]
            ],
            "hint_desc": "True if started, false otherwise",
            "tags": [],
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": []
        },
        "setOptions": {
            "name": "setOptions",
            "line": 342,
            "short_desc": "Sets session.* ini variables.",
            "long_desc": "For convenience we omit 'session.' from the beginning of the keys.\nExplicitly ignores other ini keys.",
            "hint": null,
            "hint_desc": null,
            "tags": {
                "see": [
                    [
                        "http:\/\/php.net\/session.configuration"
                    ]
                ]
            },
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "options": {
                    "name": "options",
                    "line": 342,
                    "short_desc": "Session ini directives array(key => value)",
                    "long_desc": null,
                    "hint": [
                        [
                            "array",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "array",
                    "default": null,
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "setSaveHandler": {
            "name": "setSaveHandler",
            "line": 389,
            "short_desc": "Registers session save handler as a PHP session handler.",
            "long_desc": "To use internal PHP session save handlers, override this method using ini_set with\nsession.save_handler and session.save_path e.g.\n\n    ini_set('session.save_handler', 'files');\n    ini_set('session.save_path', '\/tmp');\n\nor pass in a \\SessionHandler instance which configures session.save_handler in the\nconstructor, for a template see NativeFileSessionHandler or use handlers in\ncomposer package drak\/native-session",
            "hint": null,
            "hint_desc": null,
            "tags": {
                "see": [
                    [
                        "http:\/\/php.net\/session-set-save-handler"
                    ],
                    [
                        "http:\/\/php.net\/sessionhandlerinterface"
                    ],
                    [
                        "http:\/\/php.net\/sessionhandler"
                    ],
                    [
                        "http:\/\/github.com\/drak\/NativeSession"
                    ]
                ]
            },
            "modifiers": 1,
            "is_by_ref": "",
            "exceptions": [
                [
                    "\\InvalidArgumentException",
                    ""
                ]
            ],
            "errors": [],
            "parameters": {
                "saveHandler": {
                    "name": "saveHandler",
                    "line": 389,
                    "short_desc": "",
                    "long_desc": null,
                    "hint": [
                        [
                            "\\SessionHandlerInterface",
                            false
                        ],
                        [
                            "null",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": null,
                    "default": "null",
                    "variadic": false,
                    "is_by_ref": false
                }
            }
        },
        "loadSession": {
            "name": "loadSession",
            "line": 424,
            "short_desc": "Load the session with attributes.",
            "long_desc": "After starting the session, PHP retrieves the session from whatever handlers\nare set to (either PHP's internal, or a custom save handler set with session_set_save_handler()).\nPHP takes the return value from the read() handler, unserializes it\nand populates $_SESSION with the result automatically.",
            "hint": null,
            "hint_desc": null,
            "tags": [],
            "modifiers": 2,
            "is_by_ref": "",
            "exceptions": [],
            "errors": [],
            "parameters": {
                "session": {
                    "name": "session",
                    "line": 424,
                    "short_desc": null,
                    "long_desc": null,
                    "hint": [
                        [
                            "array",
                            false
                        ]
                    ],
                    "tags": [],
                    "modifiers": "array",
                    "default": "null",
                    "variadic": false,
                    "is_by_ref": true
                }
            }
        }
    },
    "constants": []
}